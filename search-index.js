var searchIndex = JSON.parse('{\
"polyhal":{"doc":"This is a crate to help you supporting multiple platforms.","t":"PPPPPPPFGPPPPSSSKPPPSPPPPPPFGGSPPSCMCXHXNNNNNNNNNNNNNNNNCHHMCNNNNNNNNNNNOHHHHNNNNHCNNNNNCHCCNCCHHHOHOHNCNNNNNNNNNNNNNNNNNCHOFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSFNNNNNNNNNNFNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNFNNNNNNNNTTTTTFGTPFFTTFTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHFNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ARG0","ARG1","ARG2","Breakpoint","IllegalInstruction","InstructionPageFault","Irq","KContext","KContextArgs","KPC","KSP","KTP","LoadPageFault","MULTI_CORE_AREA","MULTI_CORE_AREA_SIZE","PAGE_SIZE","PageAlloc","RA","RET","SEPC","SIG_RETURN_ADDR","SP","SYSCALL","StorePageFault","SupervisorExternal","TLS","Time","TrapFrame","TrapFrameArgs","TrapType","USER_VADDR_END","Unknown","UserEnvCall","VIRT_ADDR_START","addr","alloc","api","arch_entry","arch_init","arch_interrupt","args","blank","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","consts","context_switch","context_switch_pt","dealloc","debug","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_user","fsx","get_cpu_num","get_fdt","get_mem_areas","hart_id","index","index","index_mut","index_mut","init","instruction","into","into","into","into","into","irq","kernel_page_table","mem","multicore","new","pagetable","percpu","read_current_tp","run_user_task","run_user_task_forever","sepc","shutdown","sstatus","switch_to_kernel_page_table","syscall_ok","time","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","wfi","x","PhysAddr","PhysPage","VirtAddr","VirtPage","add","add","add","addr","addr","as_num","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","copy_value_from_another","drop_clear","eq","eq","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_addr","from_addr","get_buffer","get_cstr","get_cstr","get_mut_ptr","get_mut_ptr","get_mut_ref","get_ptr","get_ptr","get_ref","into","into","into","into","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pn_index","pn_offest","slice_mut_with_len","slice_mut_with_len","slice_until","slice_with_len","slice_with_len","to_addr","to_addr","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","STACK_SIZE","TRAPFRAME_SIZE","DebugConsole","borrow","borrow_mut","from","getchar","into","putchar","try_from","try_into","type_id","write_str","Instruction","borrow","borrow_mut","ebreak","from","into","try_from","try_into","type_id","IRQ","IRQVector","ack","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","int_disable","int_enable","int_enabled","into","into","irq_disable","irq_enable","irq_num","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Barrier","borrow","borrow_mut","complete_sync","from","into","ordering_sync","try_from","try_into","type_id","MultiCore","boot_all","borrow","borrow_mut","from","into","try_from","try_into","type_id","A","Cache","D","Device","G","MappingFlags","MappingSize","P","Page4KB","PageTable","PageTableWrapper","R","RWX","TLB","U","URW","URWX","URX","W","X","all","alloc","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","change","clone","clone","clone_into","clone_into","cmp","complement","contains","current","deref","difference","drop","empty","eq","extend","flush_all","flush_vaddr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","kernel_pte_entry","map_kernel","map_page","not","partial_cmp","release","remove","restore","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap_page","get_local_thread_pointer","percpu_area_init","set_local_thread_pointer","Time","borrow","borrow_mut","clone","clone_into","fmt","from","from_raw","get_freq","into","now","raw","to_msec","to_nsec","to_owned","to_usec","try_from","try_into","type_id","LazyInit","MutexNoIrq","MutexNoIrqGuard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","fmt","force_unlock","from","from","from","get_mut_unchecked","get_unchecked","init_by","into","into","into","into_inner","is_init","is_locked","lock","new","new","try_from","try_from","try_from","try_get","try_into","try_into","try_into","try_lock","type_id","type_id","type_id"],"q":[[0,"polyhal"],[124,"polyhal::addr"],[233,"polyhal::consts"],[235,"polyhal::debug"],[246,"polyhal::instruction"],[255,"polyhal::irq"],[282,"polyhal::mem"],[292,"polyhal::multicore"],[301,"polyhal::pagetable"],[424,"polyhal::percpu"],[427,"polyhal::time"],[446,"polyhal::utils"],[488,"core::fmt"],[489,"core::fmt"],[490,"core::option"],[491,"alloc::vec"],[492,"core::result"],[493,"core::any"],[494,"core::cmp"],[495,"core::ffi::c_str"],[496,"alloc::string"],[497,"core::iter::traits::collect"],[498,"core::hash"],[499,"bitflags::iter"],[500,"bitflags::iter"],[501,"core::fmt"]],"d":["","","","","","","","Kernel Context","Kernel Context Arg Type.","Kernel Program Counter","Kernel Stack Pointer","Kernel Thread Pointer","","Every core has a unique area of memory. Just using …","","","","","","","","","","","","","","","Trap Frame Arg Type","","","","","","","","","","","","","Create a new blank Kernel Context.","","","","","","","","","","","","","","","","Context Switch","Context Switch With Page Table","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if the trapframe was from user.","","Get the number of cpus","Get the fdt","Get the memory area, this function should be called after …","","","","","","Init arch with page allocator, like log crate Please …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Return Some(()) if it was interrupt by syscall, otherwise …","","","调用 SBI_SHUTDOWN 来关闭操作系统（直接退出 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Get n level page table index of the given virtual address","Get n level page table offset of the given virtual address","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boot Stack Size. TODO: reduce the boot stack size. Map …","The size of the trap frame(diffent in each architecture.).","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Platform Instruction Instruction::ebreak Intruction …","","","ebreak instruction to trigger the breakpoint exception.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","IRQ interface for exposing.","","Acknowledge the irq","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Disable interrupts.","Enable interrupts.","Check if the interrupts was enabled.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Disable irq for the given IRQ number.","Enable irq for the given IRQ number.","Get the irq number in this vector","","","","","","","","This is a barrier function.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","This is a leader for the multicore operation","Boot all application cores.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Accessed Flag","Cache Flag, indicating that the page will be cached","Dirty Flag, indicating that the page was written","Device Flag, indicating that the page was used for device …","Global Flag","Mapping flags for page table.","This structure indicates size of the page that will be …","Persent","","Page Table","Page Table Wrapper","Readable Flag","Read | Write | Executeable Flags","TLB Operation set. Such as flush_vaddr, flush_all. Just …","User Accessable Flag","User | Read | Write Flags","User | Read | Write | Executeable Flags","User | Read | Executeable Flags","Writeable Flag","Executeable Flag","Get a flags value with all known bits set.","Alloc a new PageTableWrapper with new page table root This …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","flush all tlb entry","flush the TLB entry by VirtualAddress just use it directly","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","Mapping a page to specific address(kernel space address).","Mapping a page to specific virtual page (user space …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Release the page table entry.","The intersection of a source flags value with the …","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Translate a virtual adress to a physical address and …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Unmap a page from specific virtual page (user space …","Read the architecture-specific thread pointer register on …","Returns the base address of the per-CPU data area on the …","Set the architecture-specific thread pointer register to …","Time struct and its interface","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Converts hardware ticks to nanoseconds.","","","","","","","","The Mutex Guard.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","Safety","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[13,13,13,8,8,8,8,0,0,12,12,12,8,0,0,0,0,13,13,13,0,13,13,8,8,13,8,0,0,0,0,8,8,0,0,1,0,0,0,0,4,7,4,7,12,13,8,4,7,12,13,8,4,8,4,8,0,0,0,1,0,4,7,12,13,8,4,7,12,13,8,4,4,0,0,0,0,4,7,4,7,0,0,4,7,12,13,8,0,0,0,0,4,0,0,0,0,0,4,0,4,0,4,0,4,8,4,7,12,13,8,4,7,12,13,8,4,7,12,13,8,0,0,4,0,0,0,0,2,2,21,22,23,2,22,23,2,21,22,23,2,21,23,22,23,2,21,22,23,2,21,22,23,2,21,2,2,22,23,2,21,23,22,22,23,23,2,2,21,21,22,22,23,23,23,2,2,2,21,21,21,2,21,2,22,23,22,23,23,22,23,23,22,23,2,21,22,23,2,21,22,23,2,21,21,23,22,23,23,22,23,2,21,22,23,2,21,22,23,2,21,22,23,2,21,22,23,2,21,22,23,2,21,0,0,0,29,29,29,29,29,29,29,29,29,29,0,47,47,47,47,47,47,47,47,0,0,31,48,31,48,31,31,31,31,48,31,48,48,48,48,31,48,48,31,31,48,31,48,31,48,31,0,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,32,32,32,32,32,0,0,32,37,0,0,32,32,0,32,32,32,32,32,32,32,33,32,32,32,32,32,32,32,32,51,32,37,9,33,51,32,37,9,33,9,32,9,32,9,32,32,32,9,33,32,33,32,32,32,51,51,32,32,32,32,32,37,9,33,51,32,37,9,33,32,32,32,32,32,32,32,32,32,32,51,32,37,9,33,32,32,32,32,32,9,9,9,32,32,9,32,9,32,32,32,32,32,9,32,9,51,32,37,9,33,51,32,37,9,33,51,32,37,9,33,32,9,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,42,46,43,42,46,43,42,43,42,43,42,42,46,42,46,43,42,42,42,42,46,43,46,42,46,46,42,46,42,46,43,42,42,46,43,46,42,46,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[],3],0,[4,[[6,[5]]]],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[8,8],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[7,7],3],[[7,7,9],3],[[1,2],3],0,[[4,10],11],[[7,10],11],[[12,10],11],[[13,10],11],[[8,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,14],0,[[],5],[[],[[16,[15]]]],[[],[[17,[[3,[5,5]]]]]],[[],5],[[4,13],-1,[]],[[7,12],-1,[]],[[4,13],-1,[]],[[7,12],-1,[]],[1,3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],9],0,0,[[],4],0,0,[[],5],[4,[[16,[3]]]],[4,18],0,[[],18],0,[[],3],[4,3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,[[],3],0,0,0,0,0,[[2,5],-1,[]],[[2,2],-1,[]],[[21,5],-1,[]],[22,5],[23,5],[2,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[22,22],[23,23],[2,2],[21,21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[22,22],24],[[23,23],24],[[2,2],24],[[21,21],24],[[2,2],3],[2,3],[[22,22],14],[[23,23],14],[[2,2],14],[[21,21],14],[23,23],[[22,10],11],[[22,10],11],[[23,10],11],[[23,10],11],[[2,10],11],[[2,10],11],[[21,10],11],[[21,10],11],[2,22],[-1,-1,[]],[21,23],[-1,-1,[]],[5,23],[-1,-1,[]],[22,2],[5,2],[23,21],[-1,-1,[]],[5,21],[5,2],[5,21],[2,[[26,[25]]]],[22,27],[23,27],[22],[23],[23,-1,[]],[22],[23],[23,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,22],[5,23],[5,2],[5,21],[[22,22],[[16,[24]]]],[[23,23],[[16,[24]]]],[[2,2],[[16,[24]]]],[[21,21],[[16,[24]]]],[[21,5],5],[[23,5],5],[[22,5],[[26,[-1]]],[]],[[23,5],[[26,[-1]]],[]],[23,[[26,[-1]]],[]],[[22,5],[[26,[-1]]],[]],[[23,5],[[26,[-1]]],[]],[2,5],[21,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[],[[16,[25]]]],[-1,-2,[],[]],[25,3],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[[29,30],11],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],3],[-1,-1,[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,[31,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[[-1,-2],3,[],[]],[[31,10],11],[-1,-1,[]],[-1,-1,[]],[[],3],[[],3],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],[5,3],[5,3],[31,5],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],3],[-1,-1,[]],[-1,-2,[],[]],[[],3],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,[[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],32],[[],33],[[32,32],32],[[32,32],3],[[32,32],32],[[32,32],3],[32,34],[32,34],[[32,32],32],[[32,32],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,3],[32,32],[9,9],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[32,32],24],[32,32],[[32,32],14],[[],9],[33,-1,[]],[[32,32],32],[33,3],[[],32],[[32,32],14],[[32,-1],3,[[36,[],[[35,[32]]]]]],[[],3],[23,3],[[32,10],11],[[32,10],11],[[32,10],11],[[32,10],11],[[32,10],11],[[37,10],11],[[9,10],11],[[33,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,[[16,[32]]]],[34,32],[34,32],[34,32],[-1,32,[[36,[],[[35,[32]]]]]],[30,[[16,[32]]]],[[32,-1],3,38],[[32,32],3],[[32,32],32],[[32,32],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,-1,[]],[32,14],[32,14],[32,[[39,[32]]]],[32,[[40,[32]]]],[9,22],[[9,21,2,32,37],3],[[9,21,2,32,37],3],[32,32],[[32,32],[[16,[24]]]],[9,3],[[32,32],3],[9,3],[[32,32,14],3],[[32,32],32],[[32,32],3],[[32,32],32],[-1,-2,[],[]],[-1,-2,[],[]],[[32,32],3],[[9,23],[[16,[[3,[22,32]]]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[32,32],32],[[9,21],3],[[],5],[5,5],[5,3],0,[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[[-1,-2],3,[],[]],[[41,10],11],[-1,-1,[]],[5,41],[[],5],[-1,-2,[],[]],[[],41],[41,5],[41,5],[41,5],[-1,-2,[],[]],[41,5],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]]],-1,[]],[[[43,[-1]]],-1,44],[[[42,[-1]]],-1,[]],[[[43,[-1]]],-1,44],[[[42,[-1]]],3,[]],[[[42,[-1]],10],11,45],[[[46,[-1]]],3,44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[-1]]],-1,[]],[[[42,[-1]]],-1,[]],[[[42,[-1]],-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[46,[-1]]],-1,[]],[[[42,[-1]]],14,[]],[[[46,[-1]]],14,44],[[[46,[-1]]],[[43,[-1]]],44],[[],[[42,[-1]]],[]],[-1,[[46,[-1]]],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[[42,[-1]]],[[16,[-1]]],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[[46,[-1]]],[[16,[[43,[-1]]]]],44],[-1,20,[]],[-1,20,[]],[-1,20,[]]],"c":[],"p":[[10,"PageAlloc",0],[5,"PhysPage",124],[1,"tuple"],[5,"TrapFrame",0],[1,"usize"],[1,"array"],[5,"KContext",0],[6,"TrapType",0],[5,"PageTable",301],[5,"Formatter",488],[8,"Result",488],[6,"KContextArgs",0],[6,"TrapFrameArgs",0],[1,"bool"],[5,"Fdt",489],[6,"Option",490],[5,"Vec",491],[1,"never"],[6,"Result",492],[5,"TypeId",493],[5,"VirtPage",124],[5,"PhysAddr",124],[5,"VirtAddr",124],[6,"Ordering",494],[1,"u8"],[1,"slice"],[5,"CStr",495],[5,"String",496],[5,"DebugConsole",235],[1,"str"],[5,"IRQVector",255],[5,"MappingFlags",301],[5,"PageTableWrapper",301],[1,"u64"],[17,"Item"],[10,"IntoIterator",497],[6,"MappingSize",301],[10,"Hasher",498],[5,"Iter",499],[5,"IterNames",499],[5,"Time",427],[5,"LazyInit",446],[5,"MutexNoIrqGuard",446],[10,"Sized",500],[10,"Debug",488],[5,"MutexNoIrq",446],[5,"Instruction",246],[5,"IRQ",255],[5,"Barrier",282],[5,"MultiCore",292],[5,"TLB",301]],"b":[[128,"impl-Add%3Cusize%3E-for-PhysPage"],[129,"impl-Add-for-PhysPage"],[162,"impl-Display-for-PhysAddr"],[163,"impl-Debug-for-PhysAddr"],[164,"impl-Debug-for-VirtAddr"],[165,"impl-Display-for-VirtAddr"],[166,"impl-Display-for-PhysPage"],[167,"impl-Debug-for-PhysPage"],[168,"impl-Display-for-VirtPage"],[169,"impl-Debug-for-VirtPage"],[172,"impl-From%3CVirtPage%3E-for-VirtAddr"],[174,"impl-From%3Cusize%3E-for-VirtAddr"],[176,"impl-From%3CPhysAddr%3E-for-PhysPage"],[177,"impl-From%3Cusize%3E-for-PhysPage"],[178,"impl-From%3CVirtAddr%3E-for-VirtPage"],[180,"impl-From%3Cusize%3E-for-VirtPage"],[327,"impl-MappingFlags"],[328,"impl-Flags-for-MappingFlags"],[358,"impl-Debug-for-MappingFlags"],[359,"impl-LowerHex-for-MappingFlags"],[360,"impl-Octal-for-MappingFlags"],[361,"impl-UpperHex-for-MappingFlags"],[362,"impl-Binary-for-MappingFlags"],[372,"impl-Flags-for-MappingFlags"],[373,"impl-MappingFlags"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
